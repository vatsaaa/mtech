I am learning Minimax algorithm for adversarial games by applying the algorithm to game called "Catch-Up with numbers".

"Catch-Up with numbers" has five rules of play. 
Rule 1: Two players take turns at choosing numbers from the set of natural numbers, {1, 2, 3, …, n}. The highest natural number n in this set is agreed on before the game. Once a number has been chosen, it is deleted from the set and cannot be chosen again.
Rule 2: Call the player to make the first move P1, and the second player P2. I will refer to them both as "it". At the outset, P1 chooses one of the n original numbers.
Rule 3: Thereafter, P1 and P2 successively choose one or more of the remaining numbers, but each must stop—and turn play over to the other player—when the sum of its choices up to that point equals or just exceeds its opponent's previous sum.
Rule 4: The goal of the players is to have a higher sum than an opponent at the end of play and by as much as possible—or that failing, to have the same sum. If neither of these goals is achievable, a player prefers to lose by as small amount as possible.
Rule 5: The game ends when all numbers have been chosen. If one player has a higher sum than the other, that player wins. If not the game ends in a tie.

If understood, please say OK and then I will share some playing examples and choices to demonstrate how the game progresses. Do not say anything else.


Example 1:
Assume n=5, so the numbers at the start are {1, 2, 3, 4, 5}. Sample choices of players are as below:

Player1's first choice:
P1 chooses one of the 5 numbers at random. Each number has the same probability of being chosen.

Player2's first choice:
For purposes of illustration, assume that P1 chooses {3}. Then there are eight possible subsets of the remaining numbers whose sum equals or exceeds 3:
{4}, {5}, {1, 2}, {1, 4}, {1, 5}, {2, 1}, {2, 4}, {2, 5}
P2 chooses one of these possibilities at random. Again, all possibilities have an equal probability of being picked.

In six of these cases, the subsets comprise two numbers, wherein the first number—either 1 or 2—is less than 3, so a second number (the second number in each subset) is needed to make the sum for P2 equal to or greater than 3. After P2 chooses one of the eight subsets at random, either two or three numbers remain.

Player1's second choice:
P1 will choose again, and at random, a subset of the remaining numbers such that, when they are added to P1's present score of 3, equals or exceeds P2's score. Depending on the numbers that P1 chooses when it makes a second choice, P2 may or may not have a second choice that equals or exceeds P1's last total.

In summary, when a player randomises, it chooses with equal probability any of the subsets of available numbers that equal or exceed an opponent's last total.

Example 2:
The case where n=1 is trivial, as P1 will simply choose 1 and win.

Example 3:
Let us look at the simple case where n=2, so the numbers to choose from are {1,2}. 
When n=2, then P1 should choose 2. P2's only choice is 1, so it will lose to P1 by 2-1.

Example 4:
Next let us look at the simple case where n=3, so the numbers to choose from are {1,2,3}. 
There are now three possibilities:
If P1 chooses {3}, P2 will choose {1, 2} in either order and guarantee a 3-3 tie.
If P1 chooses {2}, P2 will choose {1, 3}, in that order, and guarantee a 4-2 win. This is better for P2 than choosing {3} first. In that case it would then be P1's turn to choose the remaining {1}, leading to a 3-3 draw.
If P1 chooses {1}, P2 will choose {3} and guarantee a 3-3 tie after P1 subsequently chooses {2} on the next round.
Clearly, P1 can force a draw in the first and third case, whereas in the second case P1 will lose as long as P2 plays optimally. Thus, P1 should not choose {2} initially but instead should choose {1} or {3} to ensure a draw.

If understood so far, say OK and I will share the additional details.


Applying computer-assisted backward induction to all sets of natural numbers from n=2 to n=20, 
Aaron Isaksen, Mehmet Ismail, Andy Nealen and I found that when the sum of all numbers is odd, 
optimal play results in a win by either P1 or P2 by a difference in their sums of 1. This happens, 
for example, when n=2 because 1+2=3 is odd and P1 wins by 2-1. When the sum of the numbers is even, 
optimal play results in a draw. This happens, for example, when n=3 because 1+2+3 = 6. 
As we saw above,  optimal play results in a draw of 3-3.

When the sum of the numbers is odd, one might think that P1, by going first, might always be able to force a win, but this is not the case. Excluding the cases of n=1 and 2 that I just discussed, P2 can force a win when n=9, 10, 14, or 18, whereas P1 can force a win when n=5, 6, 13, or 17. In all other 
cases (n = 3, 4, 7, 8, 11, 12, 15, 16, 19, 20) the sum of all numbers is even, so optimal play produces 
a draw.
In summary, backward-induction calculations for Catch-Up show that neither P1 nor P2 wins more often than the other between n=3 and 20 (four times each). Optimal play in the other 10 cases between n=3 and 20 leads to a draw. This is a different situation from what we find in Chess, wherein there is a general agreement that optimal play leads to a draw, or possibly a win by white (less likely, a win by black).

If understood so far, say OK and I will share further details.

The Python code I wrote to implement playing "Catch-Up with numbers" using the Minimax strategy, is given below:


When the  program is run, the following is the output:
<output>
Player 1 ready to play
Player 2 ready to play
Enter the number of numbers (n): 7
Game CatchUpWithNumbers initialized...
Randomly chose Player 2 as starting player
Player 2, select (1) to become maximizer OR select (2) to become minimizer? 1
Starting game
Catch-up Numbers: Player 2 vs. Player 1
Available numbers: [1, 2, 3, 4, 5, 6, 7]
Making move for Player  Player 2
Player 2 chooses: 1
Player 1 score: 0, Player 2 score: 1

Available numbers: [2, 3, 4, 5, 6, 7]
Making move for Player  Player 1
Player 1 chooses: 2
Player 2 score: 1, Player 1 score: 2

Available numbers: [3, 4, 5, 6, 7]
Making move for Player  Player 2
Player 2 chooses: 3
Player 1 score: 2, Player 2 score: 4

Available numbers: [4, 5, 6, 7]
Making move for Player  Player 1
Player 1 chooses: 4
Player 2 score: 4, Player 1 score: 6

Available numbers: [5, 6, 7]
Making move for Player  Player 2
Player 2 chooses: 5
Player 1 score: 6, Player 2 score: 9

Available numbers: [6, 7]
Making move for Player  Player 1
Player 1 chooses: 6
Player 2 score: 9, Player 1 score: 12

Available numbers: [7]
Making move for Player  Player 2
Player 2 chooses: 7
Player 1 score: 12, Player 2 score: 16

Player 2 wins!
</output>

In context of the given output for n=7, please answer the following questions to the point:
Who is the randomly chosen first player?
Is the first player a maximizer or a minimizer?
At the start of the game how many "Available numbers" does the first player have?
What is the first move that the first player make?
According to the game rules what should have been the first move of the first player?