

import random
from typing import List, Tuple

def generate_numbers(n: int) -> List[int]:
    """
    Generate a list of numbers from 1 to n.
    """
    return list(range(1, n + 1))

def generate_subsets(numbers: List[int], target: int) -> List[List[int]]:
    """
    Generate all subsets of numbers that sum up to at least target.
    """
    def backtrack(start: int, path: List[int], current_sum: int) -> None:
        if current_sum >= target:
            subsets.append(path[:])  # Append a copy of the path
        for i in range(start, len(numbers)):
            path.append(numbers[i])
            # Recursively call backtrack with updated parameters
            backtrack(i + 1, path, current_sum + numbers[i])
            path.pop()  # Backtrack

    subsets: List[List[int]] = []
    # Convert all non-empty string elements in numbers to integers
    numbers = [int(x) for x in numbers]
    backtrack(0, [], 0)
    return subsets

def get_available_moves(numbers: List[int], current_sum: int) -> List[int]:
    """
    Get all possible moves given the remaining numbers and current sum.
    """
    available_subsets = generate_subsets(numbers, current_sum)
    valid_moves = []
    for subset in available_subsets:
        valid_moves.extend(subset)
    

def evaluate_state(current_sum: int, opponent_sum: int) -> int:
    """
    This function evaluates the current state for Player 1 (maximizer).
    Positive values favor Player 1, negative favor Player 2 (minimizer).
    """
    return current_sum - opponent_sum

def minimax(numbers: List[int], current_target: int, player_sum: int, is_maximizer: bool) -> Tuple[int, List[int]]:
    """
    Minimax algorithm using recursive backtracking for decision-making.
    """
    available_moves = get_available_moves(numbers.copy(), current_target)

    if not available_moves:
        # No valid moves - return a negative score for maximizer, positive for minimizer
        return (-float('inf'), None) if is_maximizer else (float('inf'), None)

    best_score = -float('inf') if is_maximizer else float('inf')
    best_move = None

    # print(f"Player {'MAX' if is_maximizer else 'MIN'} at sum {player_sum}, target {current_target}: Considering moves {available_moves}")

    for n in available_moves:
        remaining_numbers = numbers.copy()
        try:
            remaining_numbers.remove(n)
        except:
            print(f"Error: Removing {n} from {remaining_numbers} failed (minimax)")
            continue
        new_target = current_target + n if is_maximizer else current_target - n  # Adjust target based on player

        # Recursive call for the opponent's move
        opponent_score, _ = minimax(remaining_numbers, new_target, player_sum, not is_maximizer)

        # Update best score based on player type (maximizer or minimizer)
        if is_maximizer and opponent_score > best_score:
            best_score = opponent_score
            best_move = move
        elif not is_maximizer and opponent_score < best_score:
            best_score = opponent_score
            best_move = move

    # print(f"Player {'MAX' if is_maximizer else 'MIN'} at sum {player_sum}, target {current_target}: Best move {best_move} with score {best_score}")

    return best_score, best_move

def play_catch_up_new(n: int) -> None:
    """
    Play the Catch-Up game between two computer players.
    """
    numbers = list(range(1, n + 1))
    current_sum: int = 0
    opponent_sum: int = 0

    while numbers:
        # print(f"Current sum: {current_sum} | Opponent sum: {opponent_sum} | Remaining numbers: {numbers}")

        # Player 1 (Computer) - Use minimax for decision-making
        if not current_sum:  # Check if it's the first move (current_sum is 0)
            p1_move = random.choice(numbers.copy())
            print(f"P1 randomly chooses: {p1_move} | Subsets for P2: {generate_subsets(numbers, current_sum)}")
        else:
            best_score_p1, p1_move = minimax(numbers.copy(), opponent_sum, current_sum, player1_maximizer)
            print(f"P1 considered moves: {numbers.copy()}")
            if not p1_move:
                print("P1 has no available moves.")
                break
        current_sum += p1_move
        numbers.remove(p1_move)
        print(f"P1 chooses: {p1_move} | Subsets for P2: {generate_subsets(numbers, current_sum)}")
        if not numbers:
            break

        # Player 2 (Computer) - Use minimax for decision-making
        best_score_p2, p2_move = minimax(numbers.copy(), current_sum, opponent_sum, player2_maximizer)
        print(f"P2 considered moves: {numbers.copy()}")
        if not p2_move:
            print("P2 has no available moves.")
            break
        opponent_sum += p2_move
        numbers.remove(p2_move)
        print(f"P2 chooses: {p2_move} | Subsets for P1: {generate_subsets(numbers, current_sum)}")
        if not numbers:
            break

    # Evaluate the final result
    if current_sum > opponent_sum:
        print("P1 wins!")
    elif current_sum == opponent_sum:
        print("It's a tie!")
    else:
        print("P2 wins!")

    print(f"Final scores - P1: {current_sum}, P2: {opponent_sum}")

def play_catch_up(n: int) -> None:
    """
    Play the Catch-Up game between two computer players.
    """
    numbers = generate_numbers(n)
    current_sum: int = 0
    opponent_sum: int = 0
    
    while numbers:
        print(f"Current sum: {current_sum} | Opponent sum: {opponent_sum} | Remaining numbers: {numbers}")

        # Player 1 (Computer)
        available_moves_p1 = get_available_moves(numbers, opponent_sum)
        if not available_moves_p1:
            print("P1 has no available moves.")
            break
        p1_move = random.choice(available_moves_p1)
        current_sum += p1_move
        numbers.remove(p1_move)
        print(f"P1 chooses: {p1_move} | Subsets for P2: {generate_subsets(numbers, current_sum)}")
        if not numbers:
            break

        # Player 2 (Computer)
        available_moves_p2 = get_available_moves(numbers, current_sum)
        if not available_moves_p2:
            print("P2 has no available moves.")
            break

        p2_move = random.choice(available_moves_p2)
        opponent_sum += p2_move
        numbers.remove(p2_move)
        print(f"P2 chooses: {p2_move} | Subsets for P1: {generate_subsets(numbers, opponent_sum)}")
        if not numbers:
            break

    # Evaluate the final result
    if current_sum > opponent_sum:
        print("P1 wins!")
    elif current_sum == opponent_sum:
        print("It's a tie!")
    else:
        print("P2 wins!")

    print(f"Final scores - P1: {current_sum}, P2: {opponent_sum}")

while True:
    n = int(input("Enter the value of n (greater than 0 and less than 150): "))
    if 0 < n < 150:
        break
    else:
        print("Invalid input. Please enter a value greater than 0 and less than 150.")

# Determine if Player 1 is a maximizer based on user input
player1_maximizer = bool(int(input("Is Player 1 a maximizer? (Enter 1 for Yes, 0 for No): ")))

# Player 2 automatically becomes the minimizer
player2_maximizer = not player1_maximizer
play_catch_up_new(n)

